### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Comment {
  author: User
  authorId: Int
  id: Int!
  post: Post
  postId: Int
  text: String!
}

input CommentCreateInput {
  author: UserCreateOneWithoutCommentsInput
  post: PostCreateOneWithoutCommentsInput
  text: String!
}

input CommentCreateManyWithoutAuthorInput {
  connect: [CommentWhereUniqueInput!]
  create: [CommentCreateWithoutAuthorInput!]
}

input CommentCreateManyWithoutPostInput {
  connect: [CommentWhereUniqueInput!]
  create: [CommentCreateWithoutPostInput!]
}

input CommentCreateWithoutAuthorInput {
  post: PostCreateOneWithoutCommentsInput
  text: String!
}

input CommentCreateWithoutPostInput {
  author: UserCreateOneWithoutCommentsInput
  text: String!
}

input CommentWhereUniqueInput {
  id: Int
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
The `JSON` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json

type Mutation {
  createOneComment(data: CommentCreateInput!): Comment!
  createOneDraft(authorId: Int!, body: String!, title: String!): Post!
  createOnePost(data: PostCreateInput!): Post!
  createOneUser(data: UserCreateInput!): User!
  publishOneDraft(draftId: Int!): Post!
}

type Post {
  author: User
  authorId: Int
  body: String!
  comments(after: CommentWhereUniqueInput, before: CommentWhereUniqueInput, first: Int, last: Int): [Comment!]!
  id: Int!
  published: Boolean!
  title: String!
}

input PostCreateInput {
  author: UserCreateOneWithoutPostsInput
  body: String!
  comments: CommentCreateManyWithoutPostInput
  published: Boolean!
  title: String!
}

input PostCreateManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutAuthorInput!]
}

input PostCreateOneWithoutCommentsInput {
  connect: PostWhereUniqueInput
  create: PostCreateWithoutCommentsInput
}

input PostCreateWithoutAuthorInput {
  body: String!
  comments: CommentCreateManyWithoutPostInput
  published: Boolean!
  title: String!
}

input PostCreateWithoutCommentsInput {
  author: UserCreateOneWithoutPostsInput
  body: String!
  published: Boolean!
  title: String!
}

input PostWhereUniqueInput {
  id: Int
}

type Query {
  comment(where: CommentWhereUniqueInput!): Comment
  comments(after: CommentWhereUniqueInput, before: CommentWhereUniqueInput, first: Int, last: Int): [Comment!]!
  drafts: [Post!]!
  post(where: PostWhereUniqueInput!): Post
  posts: [Post!]!
  user(where: UserWhereUniqueInput!): User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
}

type User {
  comments(after: CommentWhereUniqueInput, before: CommentWhereUniqueInput, first: Int, last: Int): [Comment!]!
  firstName: String!
  id: Int!
  lastName: String!
  posts(after: PostWhereUniqueInput, before: PostWhereUniqueInput, first: Int, last: Int): [Post!]!
}

input UserCreateInput {
  comments: CommentCreateManyWithoutAuthorInput
  firstName: String!
  lastName: String!
  posts: PostCreateManyWithoutAuthorInput
}

input UserCreateOneWithoutCommentsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCommentsInput
}

input UserCreateOneWithoutPostsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPostsInput
}

input UserCreateWithoutCommentsInput {
  firstName: String!
  lastName: String!
  posts: PostCreateManyWithoutAuthorInput
}

input UserCreateWithoutPostsInput {
  comments: CommentCreateManyWithoutAuthorInput
  firstName: String!
  lastName: String!
}

input UserWhereUniqueInput {
  id: Int
}
